@page "/Bill/{sectionId:int}"

@using Apex.GameZone.UI.Models
@using Apex.GameZone.UI.Models.CheckoutModel
@using Apex.GameZone.UI.Pages.PopUp
@using Apex.GameZone.UI.Services.CheckServices
@using Apex.GameZone.UI.Services.SectionServices
@using Microsoft.AspNetCore.Components


@inject ISectionService _sectionService
@inject ICheckService _billService
@inject NavigationManager _navManager
@inject DialogService dialogService


<RadzenTemplateForm TItem="SectionModel" Data="section">
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-7">
                <RadzenFieldset Text="Section Info" Style="width: 499px; height: 528px">
                    <div class="row mb-5">
                        <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel Text="Name" />
                        </div>
                        <div class="col">
                            <RadzenTextBox style="display: block" Disabled Name="Name" @bind-Value="section.Name" />
                        </div>
                    </div>
                    <div class="row mb-5">
                        <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel Text="Description" />
                        </div>
                        <div class="col">
                            <RadzenTextBox style="display: block" Disabled Name="Description" @bind-Value="section.Description" />
                        </div>
                    </div>
                    <div class="row mb-5">
                        <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel Text="Price" />
                        </div>
                        <div class="col">
                            <RadzenNumeric style="display: block" Disabled Name="Price" @bind-Value="section.PricePerHour" />
                        </div>
                    </div>
                    <div class="row mb-5">
                        <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel Text="IsVip" />
                        </div>
                        <div class="col">
                            <RadzenCheckBox Disabled Name="IsVip" @bind-Value="section.IsVip" />
                        </div>
                    </div>

                    <div class="row mb-5">
                        <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel Text="IsBusy" />
                        </div>
                        <div class="col">
                            <RadzenCheckBox Disabled Name="IsBusy" @bind-Value="section.IsBusy" />
                        </div>
                    </div>
                </RadzenFieldset>
            </div>
            <div class="col-md-5">
                @if (!section.IsBusy)
                {
                    <RadzenButton Style="width: 180px; height: 49px" Click="@Start" Text="Start now" Icon="timer"></RadzenButton>
                    <RadzenButton Style="width: 180px; height: 49px" Click="@OpenFixedPopup" Text="Fixed Time" Icon="av_timer"></RadzenButton>
                }

                else
                {
                    @if (check.ExpectedEnd.HasValue)
                    {
                        <RadzenButton Style="width: 180px; height: 49px" Icon="restart_alt" Text="Add Time"></RadzenButton>

                    }
                    <RadzenButton Style="width: 180px; height: 49px" Icon="alarm_on" Click="@CheckBill" Text="Check Bill"></RadzenButton>
                    <RadzenButton Style="width: 180px; height: 49px" Icon="alarm_on" Click="@AddProductPopUp" Text="Add Product"></RadzenButton>
                    <RadzenButton Style="width: 180px; height: 49px" Icon="alarm_on" Click="@AddItem" Text="Add Items"></RadzenButton>


                    //ToDo Load Products and Icons
                    //

                }
            </div>
        </div>
    </div>
</RadzenTemplateForm>

@code {
    [Parameter]
    public int sectionId { get; set; }

    SectionModel section = new();
    CheckoutModel check = new();

    protected override async Task OnInitializedAsync()
    {
        section = await _sectionService.GetSectionById(sectionId);
        if (section.IsBusy)
        {
            //Get last check
            check = await _billService.GetCheckoutBySectionId(section.Id);
        }
    }

    async Task Start()
    {
        check.Start = DateTime.Now;
        check.SectionId = section.Id;
        check.GameZoneId = section.GameZoneId;
        section.IsBusy = true;

        //Set Section Busy
        await _sectionService.UpdateSection(section);

        await _billService.CreateCheckout(check);

        _navManager.NavigateTo("/sections", true);
    }

    private EventCallback<DateTime> EndDateHandler => EventCallback.Factory.Create<DateTime>(this, async (endDate) =>
    {
         await FixedTime(endDate);
    });

    async Task OpenFixedPopup()
    {
        var retval = await dialogService.OpenAsync<FixedTimePopup>($"Add Fixed Time",
        new Dictionary<string, object>() { { nameof(FixedTimePopup.SubscriptionStateChanged), EndDateHandler } },
        new DialogOptions() { Width = "600px", Height = "auto" });

    }

    async Task FixedTime(DateTime expectedEndTime)
    {
        check.Start = DateTime.Now;
        check.ExpectedEnd = expectedEndTime; // ExpectedTime not EndTime

        check.SectionId = section.Id;
        check.GameZoneId = section.GameZoneId;
        section.IsBusy = true;

        //Set Section Busy
        await _sectionService.UpdateSection(section);

        await _billService.CreateCheckout(check);

        // Open amount Dialog and then refresh
        _navManager.NavigateTo("/sections", true);
    }

    void AddTime(double time)
    {
        if (check.ExpectedEnd != null)
            check.ExpectedEnd = check.ExpectedEnd.Value.AddHours(time); // Assign the updated value back to ExpectedEnd

        _billService.UpdateCheckout(check);

        _navManager.NavigateTo("/sections", true);
    }

    async Task CheckBill()
    {
        await dialogService.OpenAsync<Check>($"Order {check.Id}",
            new Dictionary<string, object>() { { "OrderID", check.Id } },
            new DialogOptions() { Width = "700px", Height = "512px", Resizable = true, Draggable = true });
    }

    private EventCallback<DateTime> ProductHandler => EventCallback.Factory.Create<DateTime>(this, async (endDate) =>
    {
        await AddProduct(endDate);
    });

    async Task AddProductPopUp()
    {
        var retval = await dialogService.OpenAsync<FixedTimePopup>($"Add Product",
            new Dictionary<string, object>() { { "SubscriptionStateChanged", ProductHandler } },
            new DialogOptions() { Width = "600px", Height = "auto" });
    }

    async Task AddProduct(DateTime expectedEndTime)
    {
        
        check.Start = DateTime.Now;
        check.ExpectedEnd = expectedEndTime; // ExpectedTime not EndTime

        check.SectionId = section.Id;
        check.GameZoneId = section.GameZoneId;
        section.IsBusy = true;

        //Set Section Busy
        await _sectionService.UpdateSection(section);

        await _billService.CreateCheckout(check);

        // Open amount Dialog and then refresh
        _navManager.NavigateTo("/sections", true);
    }


    async Task AddItem()
    {

    }
}
