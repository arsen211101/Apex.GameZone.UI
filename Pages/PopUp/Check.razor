@page "/Check/{OrderID}"

@using Apex.GameZone.UI.Models.CheckoutModel
@using Apex.GameZone.UI.Services.CheckServices
@using Apex.GameZone.UI.Services.SectionServices
@using Apex.GameZone.UI.Models
@using Apex.GameZone.UI.Services.ProductServices

@inject ICheckService checkService
@inject ISectionService sectionService
@inject IProductService productService

@inject DialogService dialogService
@inject NavigationManager navManager

<div class="row my-4">
    <div class="col-md-12">
        <RadzenText TextStyle="TextStyle.Subtitle1">
            <b>Check Details : </b> Start Time: @order.Start.ToShortTimeString() End Time: @if (order.End != null)
            {
                @order.End.Value.ToShortTimeString()
            }
            <RadzenBadge BadgeStyle="BadgeStyle.Secondary" Text=@($"{String.Format(new System.Globalization.CultureInfo("en-US"), "{0:N0}", Bill + " AMD")}") Class="float-end" />
        </RadzenText>

        <br />

        <RadzenText TextStyle="TextStyle.H5">Product</RadzenText>
        <RadzenDataGrid AllowFiltering="false" AllowPaging="true" AllowSorting="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        Data="@(order.ConnectedProducts)" TItem="ProductCheckoutModel" ColumnWidth="200px" Class="mt-3" Density="Density.Compact" AllowAlternatingRows="false">
            <Columns>
                <RadzenDataGridColumn TItem="ProductCheckoutModel" Property="ProductModel.Name" Title="Product Name" />
                <RadzenDataGridColumn TItem="ProductCheckoutModel" Property="ProductModel.ActualPrice" Title="Price" />
                <RadzenDataGridColumn TItem="ProductCheckoutModel" Property="Quantity" Title="Quantity" />
            </Columns>
        </RadzenDataGrid>

        <br />
  <RadzenText TextStyle="TextStyle.H5">Items</RadzenText>
        <RadzenDataGrid AllowFiltering="false" AllowPaging="true" AllowSorting="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        Data="@(order.ConnectedItems)" TItem="ItemCheckoutModel" ColumnWidth="200px" Class="mt-3" Density="Density.Compact" AllowAlternatingRows="false">
            <Columns>
                <RadzenDataGridColumn TItem="ItemCheckoutModel" Property="Start" Title="Start" />
                <RadzenDataGridColumn TItem="ItemCheckoutModel" Property="Bill" Title="Bill" />
            </Columns>
        </RadzenDataGrid>
    </div>
</div>
<div class="row">
    <div class="col-md-12 text-end">
        <RadzenButton Style="width: 180px; height: 49px" Icon="alarm_on" Variant="Variant.Flat" Click="@Stop" Text="End"></RadzenButton>
        <RadzenButton Click="@((args) => dialogService.Close(true))" Variant="Variant.Flat" Text="OK" Style="width: 180px; height: 49px" />
    </div>
</div>

@code {
    [Parameter]
    public int OrderID { get; set; }

    CheckoutModel order = new();
    SectionModel section = new();

    public int Bill { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        order = await checkService.GetCheckoutById(OrderID);
        section = await sectionService.GetSectionById(order.SectionId);
        if (order.Bill == 0)
        {
            TimeSpan ts = DateTime.Now - order.Start;

            Bill = Convert.ToInt32(ts.TotalMinutes * section.PricePerHour / 60);

            foreach (var item in order.ConnectedProducts)
            {
                var productInfo = await productService.GetProductById(item.ProductId);
                Bill += Convert.ToInt32(productInfo.ActualPrice * item.Quantity);
            }
        }
    }

    async Task Stop()
    {
        order.End = DateTime.Now;

        TimeSpan ts = DateTime.Now - order.Start;
        order.Bill = Convert.ToInt32(ts.TotalMinutes * section.PricePerHour / 60);

        foreach (var item in order.ConnectedProducts)
        {
            var productInfo = await productService.GetProductById(item.ProductId);
            Bill += Convert.ToInt32(productInfo.ActualPrice * item.Quantity);
        }

        // Update checkout
        await checkService.UpdateCheckout(order);

        section.IsBusy = false;

        //Set Section Not Busy
        await sectionService.UpdateSection(section);

        // Open amount Dialog and then refresh
        navManager.NavigateTo("/sections", true);
    }
}
