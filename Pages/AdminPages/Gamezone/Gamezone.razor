@page "/gamezone/{gameZoneId:int}"

@using Apex.GameZone.UI.Services.GamezoneServices
@using Apex.GameZone.UI.Services.ItemServices
@using Apex.GameZone.UI.Services.ProductServices
@using Apex.GameZone.UI.Services.SectionServices
@using Apex.GameZone.UI.Models
@using Apex.GameZone.UI.Models.Auth
@using Apex.GameZone.UI.Enums


@inject IGamezoneService _gameZonerservice
@inject ISectionService _sectionService
@inject IProductService _productService
@inject IItemService _itemService

<RadzenTemplateForm TItem="GameZoneModel" Data="@gameZone">
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-5">
                <RadzenFieldset Text="GameZone Info">
                    <div class="row mb-5">
                        <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel Text="Name"/>
                        </div>
                        <div class="col">
                            <RadzenTextBox style="display: block" Disabled Name="Name" @bind-Value="gameZone.Name"/>
                        </div>
                    </div>
                    <div class="row mb-5">
                        <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel Text="Address"/>
                        </div>
                        <div class="col">
                            <RadzenTextBox style="display: block" Disabled Name="Address" @bind-Value="@gameZone.Address"/>
                        </div>
                    </div>
                    <div class="row mb-5">
                        <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel Text="Email"/>
                        </div>
                        <div class="col">
                            <RadzenTextBox style="display: block" Disabled Name="Email" @bind-Value="@gameZone.Email"/>
                        </div>
                    </div>
                    <div class="row mb-5">
                        <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel Text="Phone Number"/>
                        </div>
                        <div class="col">
                            <RadzenTextBox Disabled Name="Phone" @bind-Value="gameZone.Phone"/>
                        </div>
                    </div>
                </RadzenFieldset>
            </div>

            <div class="col-md-5">
                <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" Class="mt-2 mb-4" Text="Add New User" Click="@InsertUserRow" Disabled="@(usersToInsert != null || usersToUpdate != null)"/>
                <RadzenDataGrid @ref="usersGrid" AllowAlternatingRows="false" AllowFiltering="true" AllowPaging="true" PageSize="5" AllowSorting="true" EditMode="DataGridEditMode.Single" Data="@users" TItem="UserModel" RowUpdate="@OnUpdateUserRow" RowCreate="@OnCreateUserRow" Sort="@ResetUsers" Page="@ResetUsers" Filter="@ResetUsers">
                    <Columns>
                        <RadzenDataGridColumn TItem="UserModel" Property="Username" Title="Username">
                            <EditTemplate Context="user">
                                <RadzenTextBox @bind-Value="user.Username" Style="display: block; width: 100%;" Name="Username"/>
                                <RadzenRequiredValidator Text="Username is required" Component="Username" Popup="true"/>
                            </EditTemplate>
                        </RadzenDataGridColumn>

                        <RadzenDataGridColumn TItem="UserModel" Filterable="false" Property="Email" Title="Email">
                            <EditTemplate Context="user">
                                <RadzenTextBox @bind-Value="user.Email" Style="display: block; width: 100%;" Name="Email"/>
                                <RadzenRequiredValidator Text="Email is required" Component="Email" Popup="true"/>
                            </EditTemplate>
                        </RadzenDataGridColumn>

                        <RadzenDataGridColumn TItem="UserModel" Filterable="false" Property="Password" Title="Password">
                            <EditTemplate Context="user">
                                <RadzenTextBox @bind-Value="user.Password" Style="display: block; width: 100%;" Name="Password"/>
                                <RadzenRequiredValidator Text="Password is required" Component="Password" Popup="true"/>
                            </EditTemplate>
                        </RadzenDataGridColumn>

                        <RadzenDataGridColumn TItem="UserModel" Filterable="false" Property="ConfirmPassword" Title="ConfirmPassword">
                            <EditTemplate Context="user">
                                <RadzenTextBox @bind-Value="user.ConfirmPassword" Style="display: block; width: 100%;" Name="ConfirmPassword"/>
                                <RadzenRequiredValidator Text="ConfirmPassword is required" Component="ConfirmPassword" Popup="true"/>
                            </EditTemplate>
                        </RadzenDataGridColumn>

                        <RadzenDataGridColumn TItem="UserModel" Context="user" Filterable="false" Sortable="false" TextAlign="TextAlign.Right">
                            <Template Context="user">
                                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditUserRow(user))" @onclick:stopPropagation="true">
                                </RadzenButton>
                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" Class="my-1 ms-1" Click="@(args => DeleteUserRow(user))" @onclick:stopPropagation="true"></RadzenButton>
                            </Template>
                            <EditTemplate Context="user">
                                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => SaveUserRow(user))"></RadzenButton>
                                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Class="my-1 ms-1" Click="@(args => CancelUserEdit(user))"></RadzenButton>
                            </EditTemplate>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            </div>
        </div>
    </div>
</RadzenTemplateForm>

<RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" Class="mt-2 mb-4" Text="Add New Section" Click="@InsertRow" Disabled="@(sectionsToInsert != null || sectionsToUpdate != null)"/>
<RadzenDataGrid @ref="sectionsGrid" AllowAlternatingRows="false" AllowFiltering="true" AllowPaging="true" PageSize="5" AllowSorting="true" EditMode="DataGridEditMode.Single" Data="@sections" TItem="SectionModel" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" Sort="@Reset" Page="@Reset" Filter="@Reset">
    <Columns>
        <RadzenDataGridColumn Width="50px" TItem="SectionModel" Title="#" Filterable="false" Sortable="false" TextAlign="TextAlign.Center">
            <Template Context="data">
                @(sections.IndexOf(data) + 1)
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="SectionModel" Property="Name" Title="Name">
            <EditTemplate Context="section">
                <RadzenTextBox @bind-Value="section.Name" Style="display: block; width: 100%;" Name="Name"/>
                <RadzenRequiredValidator Text="Name is required" Component="Name" Popup="true"/>
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="SectionModel" Filterable="false" Property="Type" Title="Type">
            <EditTemplate Context="section">
                <RadzenDropDown @bind-Value="section.Type" Data="@Types" Style="display: block; width: 100%;" Name="Type"/>
                <RadzenRequiredValidator Text="Type is required" Component="Type" Popup="true"/>
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="SectionModel" Filterable="false" Property="Description" Title="Description">
            <EditTemplate Context="section">
                <RadzenTextBox @bind-Value="section.Description" Style="display: block; width: 100%;" Name="Description"/>
                <RadzenRequiredValidator Text="Description is required" Component="Description" Popup="true"/>
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="SectionModel" Filterable="false" Property="PricePerHour" Title="PricePerHour">
            <EditTemplate Context="section">
                <RadzenNumeric @bind-Value="section.PricePerHour" Style="display: block; width: 100%;" Name="PricePerHour"/>
                <RadzenRequiredValidator Text="PricePerHour is required" Component="PricePerHour" Popup="true"/>
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="SectionModel" Filterable="false" Property="IsVip" Title="Vip">
            <EditTemplate Context="section">
                <RadzenCheckBox @bind-Value="section.IsVip" Name="IsVip" TValue="bool"/>
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="SectionModel" Context="section" Filterable="false" Sortable="false" TextAlign="TextAlign.Right">
            <Template Context="section">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(section))" @onclick:stopPropagation="true">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" Class="my-1 ms-1" Click="@(args => DeleteRow(section))" @onclick:stopPropagation="true"></RadzenButton>
            </Template>
            <EditTemplate Context="section">
                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => SaveRow(section))"></RadzenButton>
                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Class="my-1 ms-1" Click="@(args => CancelEdit(section))"></RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

<RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" Class="mt-2 mb-4" Text="Add New Product" Click="@InsertProductRow" Disabled="@(productsToInsert != null || productsToUpdate != null)"/>
<RadzenDataGrid @ref="productsGrid" AllowAlternatingRows="false" AllowFiltering="true" AllowPaging="true" PageSize="5" AllowSorting="true" EditMode="DataGridEditMode.Single" Data="@products" TItem="ProductModel" RowUpdate="@OnUpdateProductRow" RowCreate="@OnCreateProductRow" Sort="@ResetProducts" Page="@ResetProducts" Filter="@ResetProducts">
    <Columns>
        <RadzenDataGridColumn Width="50px" TItem="ProductModel" Title="#" Filterable="false" Sortable="false" TextAlign="TextAlign.Center">
            <Template Context="product">
                @(products.IndexOf(product) + 1)
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="ProductModel" Property="Name" Title="Name">
            <EditTemplate Context="product">
                <RadzenTextBox @bind-Value="product.Name" Style="display: block; width: 100%;" Name="Name"/>
                <RadzenRequiredValidator Text="Product Name is required" Component="Name" Popup="true"/>
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="ProductModel" Filterable="false" Property="Description" Title="Description">
            <EditTemplate Context="product">
                <RadzenTextBox @bind-Value="product.Description" Style="display: block; width: 100%;" Name="Description"/>
                <RadzenRequiredValidator Text="Product Description is required" Component="Description" Popup="true"/>
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="ProductModel" Filterable="false" Property="Price" Title="Price">
            <EditTemplate Context="product">
                <RadzenNumeric @bind-Value="product.Price" Style="display: block; width: 100%;" Name="Price"/>
                <RadzenRequiredValidator Text="Price is required" Component="Price" Popup="true"/>
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="ProductModel" Filterable="false" Property="ActualPrice" Title="ActualPrice">
            <EditTemplate Context="product">
                <RadzenNumeric @bind-Value="product.ActualPrice" Style="display: block; width: 100%;" Name="ActualPrice"/>
                <RadzenRequiredValidator Text="Actual Price is required" Component="ActualPrice" Popup="true"/>
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="ProductModel" Filterable="false" Property="Quantity" Title="Quantity">
            <EditTemplate Context="product">
                <RadzenNumeric @bind-Value="product.Quantity" Style="display: block; width: 100%;" Name="Quantity"/>
                <RadzenRequiredValidator Text="Quantity is required" Component="Quantity" Popup="true"/>
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="ProductModel" Context="product" Filterable="false" Sortable="false" TextAlign="TextAlign.Right">
            <Template Context="product">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditProductRow(product))" @onclick:stopPropagation="true">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" Class="my-1 ms-1" Click="@(args => DeleteProductRow(product))" @onclick:stopPropagation="true"></RadzenButton>
            </Template>
            <EditTemplate Context="product">
                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => SaveProductRow(product))"></RadzenButton>
                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Class="my-1 ms-1" Click="@(args => CancelProductEdit(product))"></RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

<RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" Class="mt-2 mb-4" Text="Add New Item" Click="@InsertItemRow" Disabled="@(itemsToInsert != null || itemsToUpdate != null)"/>
<RadzenDataGrid @ref="itemsGrid" AllowAlternatingRows="false" AllowFiltering="true" AllowPaging="true" PageSize="5" AllowSorting="true" EditMode="DataGridEditMode.Single" Data="@items" TItem="ItemModel" RowUpdate="@OnUpdateItemRow" RowCreate="@OnCreateItemRow" Sort="@ResetItems" Page="@ResetItems" Filter="@ResetItems">
    <Columns>
        <RadzenDataGridColumn Width="50px" TItem="ItemModel" Title="#" Filterable="false" Sortable="false" TextAlign="TextAlign.Center">
            <Template Context="item">
                @(items.IndexOf(item) + 1)
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="ItemModel" Property="Name" Title="Name">
            <EditTemplate Context="item">
                <RadzenTextBox @bind-Value="item.Name" Style="display: block; width: 100%;" Name="Name"/>
                <RadzenRequiredValidator Text="Product Name is required" Component="Name" Popup="true"/>
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="ItemModel" Filterable="false" Property="Description" Title="Description">
            <EditTemplate Context="item">
                <RadzenTextBox @bind-Value="item.Description" Style="display: block; width: 100%;" Name="Description"/>
                <RadzenRequiredValidator Text="Item Description is required" Component="Description" Popup="true"/>
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="ItemModel" Filterable="false" Property="PricePerHour" Title="PricePerHour">
            <EditTemplate Context="item">
                <RadzenNumeric @bind-Value="item.PricePerHour" Style="display: block; width: 100%;" Name="PricePerHour"/>
                <RadzenRequiredValidator Text="Price Per Hour is required" Component="PricePerHour" Popup="true"/>
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="ItemModel" Context="item" Filterable="false" Sortable="false" TextAlign="TextAlign.Right">
            <Template Context="item">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditItemRow(item))" @onclick:stopPropagation="true">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" Class="my-1 ms-1" Click="@(args => DeleteItemRow(item))" @onclick:stopPropagation="true"></RadzenButton>
            </Template>
            <EditTemplate Context="item">
                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => SaveItemRow(item))"></RadzenButton>
                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Class="my-1 ms-1" Click="@(args => CancelItemEdit(item))"></RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {

    [Parameter]
    public int gameZoneId { get; set; }

    public GameZoneModel gameZone = new();

    //sections
    RadzenDataGrid<SectionModel> sectionsGrid;
    IList<SectionModel> sections;

    SectionModel sectionsToInsert;
    SectionModel sectionsToUpdate;

    readonly IEnumerable<DeviceTypes> Types = Enum.GetValues(typeof(DeviceTypes)).Cast<DeviceTypes>();

    // products
    RadzenDataGrid<ProductModel> productsGrid;
    IList<ProductModel> products;

    ProductModel productsToInsert;
    ProductModel productsToUpdate;

    // items
    RadzenDataGrid<ItemModel> itemsGrid;
    IList<ItemModel> items;

    ItemModel itemsToInsert;
    ItemModel itemsToUpdate;

    // users
    RadzenDataGrid<UserModel> usersGrid;
    IList<UserModel> users;

    UserModel usersToInsert;
    UserModel usersToUpdate;

    protected override async Task OnInitializedAsync()
    {
        gameZone = await _gameZonerservice.GetGameZoneById(gameZoneId);
        sections = gameZone.Sections.ToList();
        products = gameZone.Products.ToList();
        items = gameZone.Items.ToList();
        users = new List<UserModel>();
    }

    void Reset()
    {
        sectionsToInsert = null;
        sectionsToUpdate = null;
    }

    void ResetProducts()
    {
        productsToInsert = null;
        productsToUpdate = null;
    }

    void ResetItems()
    {
        itemsToInsert = null;
        itemsToUpdate = null;
    }

    void ResetUsers()
    {
        usersToInsert = null;
        usersToUpdate = null;
    }

    async Task EditRow(SectionModel section)
    {
        sectionsToUpdate = section;
        await sectionsGrid.EditRow(section);
    }

    async Task EditProductRow(ProductModel product)
    {
        productsToUpdate = product;
        await productsGrid.EditRow(product);
    }

    async Task EditItemRow(ItemModel item)
    {
        itemsToUpdate = item;
        await itemsGrid.EditRow(item);
    }

    async Task EditUserRow(UserModel user)
    {
        usersToUpdate = user;
        await usersGrid.EditRow(user);
    }

    void OnUpdateRow(SectionModel section)
    {
        if (section == sectionsToInsert)
        {
            sectionsToInsert = null;
        }

        sectionsToUpdate = null;
    }

    void OnUpdateProductRow(ProductModel product)
    {
        if (product == productsToInsert)
        {
            productsToInsert = null;
        }

        productsToUpdate = null;
    }

    void OnUpdateItemRow(ItemModel item)
    {
        if (item == itemsToInsert)
        {
            itemsToInsert = null;
        }
        itemsToUpdate = null;
    }

    void OnUpdateUserRow(UserModel user)
    {
        if (user == usersToInsert)
        {
            usersToInsert = null;
        }
        usersToUpdate = null;
    }

    async Task SaveRow(SectionModel section)
    {
        section.GameZoneId = gameZone.Id;
        if (section.AddedDate != null)
        {
            await _sectionService.UpdateSection(section);
        }
        else
        {
            await _sectionService.SaveSection(section);
        }
        await sectionsGrid.UpdateRow(section);
        Reset();
    }

    async Task SaveProductRow(ProductModel product)
    {
        product.GameZoneId = gameZone.Id;
        if (product.AddedDate != null)
        {
            await _productService.UpdateProduct(product);
        }
        else
        {
            await _productService.CreateProduct(product);
        }
        await productsGrid.UpdateRow(product);
        ResetProducts();
    }

    async Task SaveItemRow(ItemModel item)
    {
        item.GameZoneId = gameZone.Id;
        if (item.AddedDate != null)
        {
            await _itemService.UpdateItem(item);
        }
        else
        {
            await _itemService.SaveItem(item);
        }
        await itemsGrid.UpdateRow(item);
        ResetItems();
    }

    //ToDo
    async Task SaveUserRow(UserModel user)
    {
        user.GameZoneId = gameZone.Id;
    //if (user.AddedDate != null)
    //{
    //    await _itemService.UpdateItem(user);
    //}
    //else
    //{
    //    await _itemService.SaveItem(user);
    //}
        await usersGrid.UpdateRow(user);
        ResetItems();
    }

    void CancelEdit(SectionModel section)
    {
        if (section == sectionsToInsert)
        {
            sectionsToInsert = null;
        }

        sectionsToUpdate = null;

        sectionsGrid.CancelEditRow(section);
    }

    void CancelProductEdit(ProductModel product)
    {
        if (product == productsToInsert)
        {
            productsToInsert = null;
        }

        productsToUpdate = null;

        productsGrid.CancelEditRow(product);
    }

    void CancelItemEdit(ItemModel item)
    {
        if (item == itemsToInsert)
        {
            itemsToInsert = null;
        }

        itemsToUpdate = null;

        itemsGrid.CancelEditRow(item);
    }

    void CancelUserEdit(UserModel user)
    {
        if (user == usersToInsert)
        {
            usersToInsert = null;
        }

        usersToUpdate = null;

        usersGrid.CancelEditRow(user);
    }

    async Task DeleteRow(SectionModel section)
    {
        if (section == sectionsToInsert)
        {
            sectionsToInsert = null;
        }

        if (section == sectionsToUpdate)
        {
            sectionsToUpdate = null;
        }

        if (sections.Contains(section))
        {
            await _sectionService.DeleteSection(section);
            sections.Remove(section);

            await sectionsGrid.Reload();
        }
        else
        {
            sectionsGrid.CancelEditRow(section);
            await sectionsGrid.Reload();
        }
    }

    async Task DeleteProductRow(ProductModel product)
    {
        if (product == productsToInsert)
        {
            productsToInsert = null;
        }

        if (product == productsToUpdate)
        {
            productsToUpdate = null;
        }

        if (products.Contains(product))
        {
            await _productService.DeleteProduct(product);
            products.Remove(product);

            await productsGrid.Reload();
        }
        else
        {
            productsGrid.CancelEditRow(product);
            await productsGrid.Reload();
        }
    }

    async Task DeleteItemRow(ItemModel item)
      {
        if (item == itemsToInsert)
        {
            itemsToInsert = null;
        }

        if (item == itemsToUpdate)
        {
            itemsToUpdate = null;
        }

        if (items.Contains(item))
        {
            await _itemService.DeleteItem(item);
            items.Remove(item);

            await itemsGrid.Reload();
        }
        else
        {
            itemsGrid.CancelEditRow(item);
            await itemsGrid.Reload();
        }
    }

    //ToDo
    async Task DeleteUserRow(UserModel user)
    {
        if (user == usersToInsert)
        {
            usersToInsert = null;
        }

        if (user == usersToUpdate)
        {
            usersToUpdate = null;
        }

        if (users.Contains(user))
        {
    //await _itemService.DeleteItem(user);
            users.Remove(user);

            await usersGrid.Reload();
        }
        else
        {
            usersGrid.CancelEditRow(user);
            await usersGrid.Reload();
        }
    }


    async Task InsertRow()
    {
        sectionsToInsert = new SectionModel();
        await sectionsGrid.InsertRow(sectionsToInsert);
    }

    async Task InsertProductRow()
    {
        productsToInsert = new ProductModel();
        await productsGrid.InsertRow(productsToInsert);
    }

    async Task InsertItemRow()
    {
        itemsToInsert = new ItemModel();
        await itemsGrid.InsertRow(itemsToInsert);
    }

    async Task InsertUserRow()
    {
        usersToInsert = new UserModel();
        await usersGrid.InsertRow(usersToInsert);
    }

    void OnCreateRow(SectionModel section)
    {
    }

    void OnCreateProductRow(ProductModel product)
    {
    }

    void OnCreateItemRow(ItemModel product)
    {
    }

    void OnCreateUserRow(UserModel user)
    {
    }

}